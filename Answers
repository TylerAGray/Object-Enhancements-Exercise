Same keys and values
function createInstructor(firstName, lastName){
  return {
    firstName: firstName,
    lastName: lastName
  }
}

Same keys and values ES2015
/* Write an ES2015 Version */
/**
 * Create an instructor object with the given first name and last name.
 */
const createInstructor = (firstName, lastName) => {
  // ES2015 shorthand for creating object properties with the same key and value
  return {
    firstName,
    lastName
  };
}

Computed Property Names
var favoriteNumber = 42;

var instructor = {
  firstName: "Colt"
}

instructor[favoriteNumber] = "That is my favorite!"

Computed Property Names ES2015
/* Write an ES2015 Version */
/**
 * Create an instructor object with a computed property name using ES2015.
 */
let favoriteNumber = 42;

const instructor = {
  firstName: "Colt",
  [favoriteNumber]: "That is my favorite!"
};

Object Methods
var instructor = {
  firstName: "Colt",
  sayHi: function(){
    return "Hi!";
  },
  sayBye: function(){
    return this.firstName + " says bye!";
  }
}

Object Methods ES2015
/* Write an ES2015 Version */

const instructor = {
  firstName: "Colt",
  sayHi(){
    return "Hi!";
  },
  sayBye(){
    return this.firstName + " says bye!";
  }
}

## **createAnimal function**

Write a function which generates an animal object. The function should accepts 3 arguments:

- species: the species of animal (‘cat’, ‘dog’)
- verb: a string used to name a function (‘bark’, ‘bleet’)
- noise: a string to be printed when above function is called (‘woof’, ‘baaa’)

Use one or more of the object enhancements we’ve covered.

// Example 1:
const h = createAnimal("horse", "neigh", "Neighhhh!");
console.log(h.type); // "horse"
console.log(h.neigh()); // "Neighhhh!"

// Example 2:
const e = createAnimal("elephant", "trumpet", "Prrrr!");
console.log(e.type); // "elephant"
console.log(e.trumpet()); // "Prrrr!"

// Example 3:
const t = createAnimal("tiger", "roar", "Rawrr!");
console.log(t.type); // "tiger"
console.log(t.roar()); // "Rawrr!"




